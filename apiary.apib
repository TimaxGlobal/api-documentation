FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# Bitwala API v1

Welcome to the Bitwala API documentation. At Bitwala we get the chance to work with partners from all corners of the ecosystem and this is one of the most rewarding parts of the job. These docs are to help you get up and running as quickly as possible. We’re very excited to see what you build.

## Additional Resources
* [Slack channel](https://slack.bitwala.io)
* Node client TODO
* Sample Application TODO

## Communicating with us
* Technical issues - Chat with us in slack
* Customer support issues - [support@bitwala.io](mailto:support@bitwala.io)

## What you can do
This version of the API is limited to the **bank transfer** functionality of bitwala.

* Get info about Bitwala’s payment services
* Create bank transfers
* Manage bank transfers

## Versioning
We follow a major.minor versioning scheme. Having `/v1` in your path indicates you are using the version 1.x of the api. All 1.x versions will be backwards compatible with previous 1.x versions.

## Changelog
| Version                            | Date Released | Changes         |
|------------------------------------|------------|-----------------|
| v1.0                               | 2017-05-19 | Initial version |


## Environments
There is a sandbox environment and a production environment.

|                                       | Sandbox                           | Production                   |
|---------------------------------------|-----------------------------------|------------------------------|
| Endpoint                              | https://sandbox.bitwala.io/api/v1 | https://my.bitwala.io/api/v1 |
| Mainnet BTC                           | Yes                               | Yes                          |
| Bitwala admins need to approve access | No                                | Yes                          |
| Can simulate payment via web GUI?     | Yes                               | No                           |

## Ratelimiting
API calls are limited to 10 requests per token per second.

# Implementation Choices

We tend to follow the [JSON API conventions](http://jsonapi.org/format/).

## Headers
All requests must be sent with `Content-Type: application/vnd.api+json`.

## Response format

### Successful responses
* 200 / 201 status code
* Top level `data` key with primary data
* Top level `status` key with value `"success"`

TODO add example

### Error responses
* 4xx error codes
* Top level `status` key with value `"error"`
* Top level `error` key with an error key

TODO add example

| What happened                 | HTTP Status code | Key                         |
|-------------------------------|------------------|-----------------------------|
| Cannot find token             | 404              | token-not-found             |
| App not authorised by Bitwala | 403              | bitwala-admin-auth-required |
| Missing permissions           | 403              | missing-permissions         |
| Missing Headers               | 400              | missing-headers             |
| Bad nonce                     | 403              | nonce-invalid               |
| Content Type wrong            | 400              | bad-content-type            |
| Signature is invalid          | 403              | signature-invalid           |
| Route not found               | 404              | not-found                   |

## Webhooks
Webhooks have a similar format to successful responses, containing a status: ‘success’ key and a data key.

There are two ways to validate:
1. Check the `X-Bitwala-Signature` is valid (webhook requests are signed in the same way as api requests)
2. Make an API call to retrieve up to date data

Webhooks are considered successful if they receive a 2xx status. Webhooks are repeated in increasing time intervals while they are not successful. This happens a finite number of times.

| Attempt # | Interval   |
|-----------|------------|
| 1         | 1 second   |
| 2         | 5 seconds  |
| 3         | 15 seconds |
| 4         | 1 minute   |
| 5         | 2 minutes  |
| 6         | 5 minutes  |
| 7         | 30 minutes |
| 8         | 1 hour     |
| 9         | 4 hour     |
| 10        | 12 hour    |
| 11        | 24 hours   |


# Authentication
There are 2 ways to use the Bitwala API. Not sure which one is right for you? Get in touch.

## 1. Internal use
### Use cases
* A startup paying fiat salaries, using Bitcoin to fund these payments
* An ICO backed company liquidating crypto into company’s bank account

### KYC
**The organisation needs to be KYC’d.**

Once you sign up and your organisation is verified, you can make api calls using a **single token**.

## 2. Customer Use
### Use cases
* A wallet giving customers the option to cash out their bitcoins from within the app
* An app enabling 2 or more parties to split a bill with bitcoin

### KYC
**Each customer needs to be KYC’d.**

We need to know about each customer. They must create a Bitwala account and go through the regular verification steps. Users give partners permission to act on their behalf. An individual authenticates the app and **a different token must be used for each user.**

## KYC via contract
Do you have high levels of KYC? In a few cases, we can sign a contract with you, guaranteeing that you will do the KYC to our standards and make it available on request. The advantage is a simpler authentication flow. Please get in touch.

## Authentication flow
### Internal use
1. Go to (sanbox.)bitwala.io/api-apps
2. Create an app and select “Internal use”
3. Generate a token (id and secret) and store both securely.

### Customer use
#### Initial set up 
1. Go to (sanbox.)bitwala.io/api-apps
2. Create an app and select “Customer use”
3. Customise your app with relevant information that your customers will see e.g. logo
4. Make a note of your app ID

#### Creating a token and having the user authenticate it
1. In your app, prompt your users to authenticate via a popup or webview*
2. The user will be prompted with a screen asking them to accept your permissions. They will be redirected  to the same url with the success=true or false parameter before the window / webview attempts to close itself
3. Either via detecting a change in the iframe/webview url or testing via the `/auth` endpoint it’s possible to know whether the user authenticated

*The url must match the following pattern `https://bitwala/authenticate/:appId?permissions=BANKTRANSFERS.CREATE,BANKTRANSFER.READ` where the permissions parameter is a comma separated list of permissions.
 
 
Note: Users can revoke permissions at any time via the web GUI

## Headers
In either case, the security headers are the same.

The headers:
* X-Bitwala-Token - the id of the token
* X-Bitwala-Signature - data from request signed by the secret of the token
* X-Bitwala-Nonce - a number that must always be bigger than the last nonce used

### X-Bitwala-Token
The ID of the token provided at the time of its creation.

### X-Bitwala-Nonce
This is a number that is higher than the last nonce used. This is to prevent replay attacks.

Best practise is to use a linux timestamp.

Range: 0 - 4102444800000

### X-Bitwala-Signature
The signature is produced from the token secret, X-Bitwala-Nonce and the request.

`msg = uri_path + SHA256(request_data) + nonce`

`uri_path` is the path of the URI e.g. `/api/v1/transactions`

`nonce` is the `X-Bitwala-Nonce` included as a header

The `SHA256(request_data)` is a SHA256 digest of the `request_data`.

The request data is either
* For POST requests: the JSON encoded request body
* For GET requests: the URL encoded query

TODO: examples

If you are able to, using the node client will take care of this for you. Want to write your own client? Please get in touch.

### Testing
You can check that your authenticating correctly by GETting the `/auth` endpoint.

# Group Info 
## Status [/info]
### Get status [GET]
Basic call to check that API is working.
+ Response 200 (application/vnd.api+json)

        {
            "status": "success",
            "data": {
                "status": "ok"
            }
        }

## Inputs [/info/inputs]
### List inputs [GET]
Inputs are ways to pay into Bitwala e.g. a Bitcoin Invoice.
+ Response 200 (application/vnd.api+json)

        {
            "status": "success",
            "data": {
                "status": "ok"
            }
        }
        
## Outputs [/info/outputs]
### Get outputs [GET]
Outputs are possible payment ways that Bitwala can pay out e.g. a EUR bank transfer.
+ Response 200 (application/vnd.api+json)

        {
            "status": "success",
            "data": {
                "status": "ok"
            }
        }

# Group Auth
## Auth [/auth]
### Check authentication [GET]
Check that authentication method is valid.

**Customer Use** partners can get info about permissions.
+ Response 200 (application/vnd.api+json)

        {
            "status": "success",
            "data": {
                "status": "ok"
            }
        }

# Group Transactions
Transactions have the format:
```
{
    "_id": "3mzuZ6Pf7DEpuT8Ro",
    "createdAt": ISODate("2017-01-24T07:20:59.884Z"),
    "problem": false,
    "problemStatus": "",
    "isCanceled": false,
    "ref": "your_internal_tx_id",
    "inputsStatus": "confirmed",
    "outputsStatus": "pending",
    "refundStatus": "",
    "inputs": [
        "collection": "BitcoinInvoices",
        "doc": {
            "_id": "rfKx7BnBrCKHqD3",
            "createdAt": ISODate("2017-01-24T07:20:59.884Z"),
            "status": "confirmed",
            "convertedCurrency": "EUR",
            "currency": "XBT",
            "fee": 0.5,
            "convertedAmount": 100,
            "validUntil": ISODate("2016-10-26T12:05:16.217Z"),
            "total": 0.166225
            "depositAddress": "1FyWCZnxVeJRVdgCHaDLu5SzMwHuSUtY5a"
        }
    ],
    "outputs": [
        "collection": "BankTransfers",
        "doc": {
            "_id": "heO73mSDx1z21MtM2",
            "createdAt": ISODate("2017-01-24T07:20:59.884Z"),
            "status": "pending",
            "amount": 100,
            "currency": "EUR",
            "reference": "May Salary",
            "bankAccount": {
                "recipientType": "INDIVIDUAL",
                "firstName": "Satoshi",
                "lastName": "Nakamoto",
                "iban": "DE89370400440532013000",
                "currency": "EUR"
            }
            
        }
    ]
}
```
### Inputs and outputs
The `inputs` and `outputs` fields are an array of objects with two keys, `collection` and `doc`.

Inputs are ways that money enters Bitwala. Outputs are ways that money leaves.

A typical transfer has a `BitcoinInvoices` doc as the input and a `BankTransfers` doc as an output. This is the only pair currently supported by the API.

* Inputs convert from the `currency` to the `convertedCurrency`
* The sum of the `convertedAmount`'s of the inputs must be equal to the sum of `amount`'s of the `outputs`
* The `convertedCurrency` of the inputs must be the same as the `currency` of the outputs
* A `fee` denominated in the `convertedCurrency` is added on each of the inputs

### Statuses and flow
Inputs and outputs have a `status` field that can take one of three values: `new`, `pending`, `confirmed`.

#### Inputs
* `new` created - payment is required.
* `pending` payment received, but not confirmed yet (e.g. waiting for X bitcoin confirmations)
* `confirmed` payment confirmed

#### Outputs
* `new` created
* `pending` ready to be executed e.g. waiting for admin
* `confirmed` payment sent out

#### Typical payment flow
A typical payment flow with a bitcoin invoice and bank transfer goes through the following steps:

1. Transaction created - `inputs` and `outputs` have `new` status
2. Correct Bitcoin payment received - the input changes from `new` to `pending`
3. The payment confirms X times - the input changes from `pending` to `confirmed`
4. This triggers the output to change from `new` to `pending`
5. The admin makes the bank transfer and updates the status from `pending` to `confirmed`

Every step except for 4 triggers a webhook.

#### Problem status
The payment flow is interrupted whenever `problem` is `true` on the transaction object.

Typical cases for a problem status:
* Bitcoin payment after an invoice has exprired
* Underpayment of a bitcoin invoice
* Bank transfer rejected by the recipient bank

In the event of `problem` being set to `true`, `problemStatus` will be set to a string describing the problem.

Problems must be resolved by contacting the Bitwala admin via [support@bitwala.io](mailto:support@bitwala.io).

When a transaction is marked as having a problem, a webhook will be sent.

### Other fields
#### Transaction
* `ref` is a custom ref, e.g. an ID from your own business logic
* `refundStatus` exists when a refund has been processed on a tx
* `isCanceled` is `true` when the tx has been canceled
* `problemStatus` gives a description of the problem with the tx

#### BankTransfers
* `paidAt` is the time when the bank transfer was made
* `reference` is the refence that will be sent with the bank transfer

### Multiple inputs / outputs
It's possible to have multiple inputs or outputs e.g. splitting a payment into multiple bitcoin invoices or making multiple bank transfers with one bitcoin invoice.

## List transactions [/transactions?page={page}]
### List transactions by page [GET]
Get a list of transactions, ordered by the most recent. Limited to 50. Paginated
+ Parameters
    + page (number) - Non-zero postive integer
+ Response 200 (application/vnd.api+json)

        {
            "status": "success",
            "data": {
                "status": "ok"
            }
        }


## Get a single transaction by _id [/transactions?_id={_id}]        
### Get a transaction by _id [GET]
+ Parameters
    + _id (string) - ID of transaction
+ Response 200 (application/vnd.api+json)

        {
            "status": "success",
            "data": {
                "status": "ok"
            }
        }

## Get a single transaction by ref [/transactions?ref={ref}]        
### Get a transaction by ref [GET]
+ Parameters
    + ref (string) - ref specified at time of transaction creation
+ Response 200 (application/vnd.api+json)

        {
            "status": "success",
            "data": {
                "status": "ok"
            }
        }

## Create a transaction [/transactions]
### Create a transaction [POST]
+ Response 200 (application/vnd.api+json)

        {
            "status": "success",
            "data": {
                "status": "ok"
            }
        }